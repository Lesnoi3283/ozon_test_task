package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"fmt"
	"ozon_test_task/internal/app/graph"
	"ozon_test_task/internal/app/graph/model"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, username string, password string) (*model.AuthResponse, error) {
	panic(fmt.Errorf("not implemented: Register - register"))
}

// AddPost is the resolver for the addPost field.
func (r *mutationResolver) AddPost(ctx context.Context, title string, text string, commentsAllowed *bool) (*model.AddPostResponse, error) {
	panic(fmt.Errorf("not implemented: AddPost - addPost"))
}

// SetCommentsAllowed is the resolver for the setCommentsAllowed field.
func (r *mutationResolver) SetCommentsAllowed(ctx context.Context, postID string, allowed bool) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: SetCommentsAllowed - setCommentsAllowed"))
}

// AddComment is the resolver for the addComment field.
func (r *mutationResolver) AddComment(ctx context.Context, postID string, text string) (*model.AddCommentResponse, error) {
	panic(fmt.Errorf("not implemented: AddComment - addComment"))
}

// AddReplay is the resolver for the addReplay field.
func (r *mutationResolver) AddReplay(ctx context.Context, parentCommentID string, text string) (*model.AddReplayResponse, error) {
	panic(fmt.Errorf("not implemented: AddReplay - addReplay"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, first *int32, after *string) (*model.PostConnection, error) {
	panic(fmt.Errorf("not implemented: Posts - posts"))
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
